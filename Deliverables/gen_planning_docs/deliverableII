Deliverable II

Part 1
4.1 User Interfaces
The PC app will have a log in/log out button as well as interfaces to post the event, to view the events you've posted, and to edit/delete the events. The Android app will have a menu on the bottom of every page showing home, search by tag, search by organization, and calendar buttons. Home button sends the user back to home page, search by tag lets the user choose which tag to include on the event search results, search by organization lets users to look up events by organization, and calendar shows a calendar that lets people search events by date.
4.2 Hardware Interfaces
This app supports both Android and PC, the PC app will allow creation of accounts and submitting events, Android app will receive and show events that were entered by the PC app.
4.3 Software interfaces
The PC version of the app will be using any OS that can run the web browser, it identifys the user accounts and the event that is being posted, so people will know which account will be posting the new event. Event will be monitored by the admins and only the verified events will be sent to Android app. The Android app will require android to function, it has the purpose of showing the events on the app, as well as its menus and the event details and it will receive verified events from the PC app.
4.4 Communication interfaces
This app will use the communication functions of a web browser, and we wil use HTTP for this app on the PC side. 

Part 3 Test plan
Test account creation, and then creating events on the PC
Then we will check if there's new events on the mobile side to check if the initial thing works
Then we'll create another account and submit another event there, and check if the accounts are updated and are not the same as the first one

Part 4 Updated risk management
Lack of experience with Android/Django
The way we will monitor our lack of experience is through setting goals on the different sections of applications we are working on. If we reach these goals in a timely manner then we will know that our lack of experience is not affecting our ability to work on our project. If we miss our deadline for one of our goals, then we know we will need to work harder to overcome our lack of experience.
As the semester progresses, we will evaluate our progress on the project to see if our lack of experience is affecting us in a negative way. Once we have done this we will look at what is left to accomplish with the project and determine if we are unexperienced in the parts of the project we still need to do.
We will allocate slack days and/or utilize group meetings as extreme catch up days. We will also each individually research the item we do not know how to do before we need to program those parts of the code.

Losing a member
We will be checking on who have attended to classes. If someone has been consistently being absent then we will know to split the project into bigger chunks.
As the semester progresses, we will check who has or hasn’t been attending. Then we can see how much work in the semester we still need to do and adjust accordingly.
Other members will have to work more to catch up with the schedule.

Bad communication
We will find out if a bad communication has occurred after the task is finished or when we meet, if there’s any misunderstanding then we will know to explain things better.
If the bad communication had greatly impacted the progress, then we’ll speed up and get it right the next time to make up for the lost time.
We would specify and explain the task more clearly in a more understandable way.

Conflicting code
We will check if there are redundant or conflicting code that does not really contribute to the program itself.
If there are redundant or conflicting codes, we should comment it out and then run the program again to see if program still works, and only delete after knowing that program works without the redundant or conflicting code.
We can talk to each other to know which cunk of code does what so there won't be much more redundant or conflicting code to be made.
 
Planning problems
We can check if there are any loopholes or exploits on our project plans and if any, we can patch it up.
If there are any loopholes, exploits, or unforseen problems on the plans, we can adjust the plan to get rid of the problems or we can start a new plan together using the old plan as guideline.
We will check the plan more throughly so there will be less of a risk of unexpected problems.
